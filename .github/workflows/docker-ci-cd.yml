name: Docker CI/CD

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      skip_deploy:
        description: 'EC2 배포 단계 건너뛰기'
        required: false
        default: false
        type: boolean

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    env:
      AWS_ACCESSKEY: test-access-key
      AWS_SECRETKEY: test-secret-key

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build project
      run: ./gradlew clean build -x test
      env:
        AWS_ACCESSKEY: test-access-key
        AWS_SECRETKEY: test-secret-key
        SPRING_PROFILES_ACTIVE: test

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/chat-server .

    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/chat-server

  # 배포 작업을 별도 작업으로 분리
  deploy:
    if: github.event.inputs.skip_deploy != 'true'
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Check EC2 Connection
      id: connection_test
      run: |
        echo "EC2 호스트: ${{ secrets.EC2_HOST }}"
        echo "EC2 연결 테스트 중..."
        
        # 직접 SSH 명령어로 연결 테스트
        if ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 연결 성공"; then
          echo "✅ EC2 SSH 연결 성공"
          echo "connection_success=true" >> $GITHUB_OUTPUT
        else
          echo "❌ EC2 SSH 연결 실패"
          echo "문제 진단 정보 수집 중..."
          sudo apt-get update && sudo apt-get install -y traceroute
          traceroute -T -p 22 ${{ secrets.EC2_HOST }}
          
          echo "::error::EC2 접속 테스트 실패, 배포를 진행할 수 없습니다"
          echo "connection_success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Deploy to EC2
      if: steps.connection_test.outputs.connection_success == 'true'
      run: |
        ssh -i ~/.ssh/id_rsa -o ServerAliveInterval=60 -o ServerAliveCountMax=30 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          echo "===== 배포 시작 ====="
          echo "도커 이미지 가져오는 중..."
          docker pull ${{ secrets.DOCKER_USERNAME }}/chat-server
          
          echo "기존 컨테이너 정리 중..."
          docker stop chat-server || echo "기존 컨테이너가 없거나 중지할 수 없습니다"
          docker rm chat-server || echo "기존 컨테이너가 없거나 삭제할 수 없습니다"
          
          echo "새 컨테이너 시작 중..."
          # MongoDB URI 변수 설정
          MONGODB_URI="${{ secrets.MONGODB_URI }}?tls=true&replicaSet=rs0&readPreference=secondaryPreferred&retryWrites=false&tlsAllowInvalidHostnames=true"
          echo "MongoDB URI 형식 확인: $(echo "$MONGODB_URI" | sed "s/:[^/]*@/:\*\*\*@/")"
          
          # 컨테이너 실행, 큰따옴표로 환경변수 감싸기
          docker run -d --name chat-server -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e AWS_ACCESSKEY=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRETKEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e SPRING_DATA_MONGODB_URI="$MONGODB_URI" \
            ${{ secrets.DOCKER_USERNAME }}/chat-server
          
          # 컨테이너 상태 확인
          CONTAINER_ID=$(docker ps -q -f name=chat-server)
          
          if [ -n "$CONTAINER_ID" ]; then
            echo "✅ 컨테이너가 성공적으로 시작되었습니다. ID: $CONTAINER_ID"
            
            # 로그 일부 확인
            echo "컨테이너 로그 확인 중..."
            sleep 5  # 로그 생성 대기
            docker logs --tail 20 chat-server
            
            # 애플리케이션 상태 확인
            echo "애플리케이션 상태 확인 중..."
            if curl -s localhost:8080 &>/dev/null; then
              echo "✅ 애플리케이션이 정상적으로 응답합니다."
              exit 0
            else
              echo "⚠️ 애플리케이션이 응답하지 않습니다. 추가 점검이 필요합니다."
            fi
          else
            echo "❌ 컨테이너 시작 실패! 컨테이너 상태 확인:"
            docker ps -a | grep chat-server || echo "컨테이너를 찾을 수 없습니다"
            echo "컨테이너 로그:"
            docker logs chat-server || echo "로그를 확인할 수 없습니다"
            exit 1
          fi
          
          echo "===== 배포 완료 ====="
        '
      
    - name: Deployment Status
      run: |
        echo "✅ 배포 성공!"
        echo "서버 접속 URL: http://${{ secrets.EC2_HOST }}:8080"