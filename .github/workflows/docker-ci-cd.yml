name: Docker CI/CD

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      skip_deploy:
        description: 'EC2 배포 단계 건너뛰기'
        required: false
        default: false
        type: boolean

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    env:
      AWS_ACCESSKEY: test-access-key
      AWS_SECRETKEY: test-secret-key

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build project
      run: ./gradlew clean build -x test
      env:
        AWS_ACCESSKEY: test-access-key
        AWS_SECRETKEY: test-secret-key
        SPRING_PROFILES_ACTIVE: test

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/chat-server .

    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_USERNAME }}/chat-server

  # 배포 작업을 별도 작업으로 분리
  deploy:
    if: github.event.inputs.skip_deploy != 'true'
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Check EC2 Connection
      run: |
        echo "EC2 호스트: ${{ secrets.EC2_HOST }}"
        echo "EC2 연결 테스트 중..."
        
        # 직접 SSH 명령어로 연결 테스트
        if ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 연결 성공"; then
          echo "✅ EC2 SSH 연결 성공"
        else
          echo "❌ EC2 SSH 연결 실패"
          echo "문제 진단 정보 수집 중..."
          sudo apt-get update && sudo apt-get install -y traceroute
          traceroute -T -p 22 ${{ secrets.EC2_HOST }}
          
          echo "::warning::EC2 접속 테스트 실패, 배포가 실패할 수 있습니다."
        fi

    - name: Deploy to EC2 (직접 SSH 명령 사용)
      continue-on-error: true
      run: |
        ssh -i ~/.ssh/id_rsa -o ServerAliveInterval=60 -o ServerAliveCountMax=30 ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          echo '도커 이미지 가져오는 중...' &&
          docker pull ${{ secrets.DOCKER_USERNAME }}/chat-server &&
          echo '기존 컨테이너 정리 중...' &&
          docker stop chat-server || true &&
          docker rm chat-server || true &&
          echo '새 컨테이너 시작 중...' &&
          docker run -d --name chat-server -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e AWS_ACCESSKEY=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRETKEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e SPRING_DATA_MONGODB_URI=${{ secrets.MONGODB_URI }} \
            ${{ secrets.DOCKER_USERNAME }}/chat-server &&
          echo '배포 완료!'
        "
      
    - name: Deployment Status
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ 배포 성공!"
        else
          echo "❌ 배포 실패. 가능한 원인:"
          echo "1. EC2 인스턴스가 실행 중인지 확인하세요."
          echo "2. 보안 그룹에서 22번 포트(SSH)가 GitHub Actions 호스트에 열려있는지 확인하세요."
          echo "3. GitHub Secrets의 EC2_HOST, EC2_USER, EC2_KEY 값이 올바른지 확인하세요."
          echo "4. EC2 인스턴스의 퍼블릭 IP가 변경되었는지 확인하세요."
          
          # 워크플로우는 성공으로 표시하고 경고만 출력
          echo "::warning::EC2 배포에 실패했지만 Docker 이미지는 성공적으로 업로드되었습니다."
        fi